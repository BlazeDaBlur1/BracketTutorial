package bracket.tutorial;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.image.BufferStrategy;
import java.util.ArrayList;
import java.util.Scanner;

public class DoEverything implements Runnable {

	String title;
	int width, height;
	
	private RenderBrackets rB;
	
	private BufferStrategy bs;
	private Graphics g;
	
	private Display display;
	
	private boolean running = false;
	private Thread thread;
	
	private MouseManager mm = new MouseManager();
	
	public DoEverything(String title, int width, int height) {
		this.title = title;
		this.width = width;
		this.height = height;
	}
	
	String[] pNames = new String[32];
	
	private ArrayList<Rectangle> choices = new ArrayList<>(), gameChoices = new ArrayList<>();
	
	private static final Scanner scanner = new Scanner(System.in);
	
	private void init() {
		display = new Display(title, width, height);
		display.getCanvas().addMouseListener(mm);
		display.getCanvas().addMouseMotionListener(mm);
		display.getFrame().addMouseListener(mm);
		display.getFrame().addMouseMotionListener(mm);
		
		for(int i=0; i<4; i++) {
			choices.add(new Rectangle(20, i*75+50, 100, 50));
		}
	}
	
	String[] allChoicesSize = {"4", "8", "16", "32"};
	
	private boolean hasChosenSize = false, wantsToChooseGameScore = false;
	
	private int[] twoTeams = new int[2], scores = new int[2], teamsMovingOn, allScoresR1 = new int[32];
	private int teamToMoveOn = 0;
	
	private int size = 0;
	
	private void tick() {
		if(!hasChosenSize) {
			for(int i=0; i<choices.size(); i++) {
				if(choices.get(i)==null || choices==null || mm == null || mm.getCursor() == null) {
					return;
				}
				if(choices.get(i).contains(mm.getCursor()) && mm.isLeftPressed()) {
					hasChosenSize = true;
					size = Integer.parseInt(allChoicesSize[i]);
					rB = new RenderBrackets(size);
					for(int x=0; x<size/2; x++) {
						gameChoices.add(new Rectangle(90, x*40, 20, 40));
					}
					teamsMovingOn = new int[size/2];
				}
			}
		} else {
			for(int i=0; i<gameChoices.size(); i++) {
				if(mm.isLeftPressed() && gameChoices.get(i).contains(mm.getCursor())) {
					wantsToChooseGameScore = true;
					twoTeams[0] = i*2+1;
					twoTeams[1] = i*2+2;
					scores[0] = 0;
					scores[1] = 0;
				}
			}
			for(int i=0; i<32; i++) {
				if(mm.isLeftPressed() && new Rectangle(10, i*20, 80, 20).contains(mm.getCursor())) {
					System.out.println("What do you want the name of " + i + " to be?");
					pNames[i-1] = scanner.next();
				}
			}
			if(wantsToChooseGameScore) {
				if(mm.isLeftPressed() && new Rectangle(450, 420, 20, 20).contains(mm.getCursor())) {
					scores[0] = scores[0]+1;
				}
				if(mm.isLeftPressed() && new Rectangle(700, 420, 20, 20).contains(mm.getCursor())) {
					scores[1] = scores[1]+1;
				}
				if(mm.isLeftPressed() && new Rectangle(450, 500, 250, 100).contains(mm.getCursor())) {
					if(scores[0]>scores[1]) {
						teamToMoveOn = twoTeams[0];
					} else {
						teamToMoveOn = twoTeams[1];
					}
					allScoresR1[twoTeams[0]-1] = scores[0];
					allScoresR1[twoTeams[1]-1] = scores[1];
					wantsToChooseGameScore = false;
					for(int i=0; i<teamsMovingOn.length; i++) {
						if(teamsMovingOn[i]==0) {
							teamsMovingOn[i] = teamToMoveOn;
							return;
						}
					}
				}
			}
		}
	}
	
	private void renderRectangle(Rectangle toRender, Graphics g) {
		g.drawRect(toRender.x, toRender.y, toRender.width, toRender.height);
	}
	
	private void render() {
		bs = display.getCanvas().getBufferStrategy();
		if(bs == null){
			display.getCanvas().createBufferStrategy(3);
			return;
		}
		g = bs.getDrawGraphics();
		//Clear Screen
		g.clearRect(0, 0, width, height);
		//Draw Here!
		
		g.fillRect(0, 0, 1000, 750);
		// get amount of players
		g.setColor(Color.white);
		g.setFont(new Font("Arial", Font.PLAIN, 25));
		if(!hasChosenSize) {
			g.drawString("Choose the amount of players you wish for your bracket:", 10, 20);
			
			for(int i=0; i<choices.size(); i++) {
				renderRectangle(choices.get(i), g);
			}
			for(int i=0; i<allChoicesSize.length; i++) {
				g.drawString(allChoicesSize[i], 65, i*75+80);
			}
		} else {
			rB.render(g);
			for(int i=0; i<teamsMovingOn.length; i++) {
				g.drawString(teamsMovingOn[i] + "", 125, i*40+25);
			}
			for(int i=0; i<allScoresR1.length; i++) {
				g.drawString(allScoresR1[i] + "", 90, i*20+15);
				if(pNames[i]==null) {
					pNames[i] = "";
				}
				g.drawString(pNames[i], 30, i*20+15);
			}
			if(wantsToChooseGameScore) {
				g.setColor(Color.gray);
				g.fillRect(200, 100, width-400, height-200);
				g.setColor(Color.WHITE);
				for(int i=0; i<2; i++) {
					g.setFont(new Font("Arial", Font.BOLD, 25));
					g.drawString(twoTeams[i] + "", i*150+400, 300);
					g.drawString("Score:", i*150+400, 400);
					g.drawString(scores[i] + "", i*150+400, 420);
				}
				renderRectangle(new Rectangle(450, 420, 20, 20), g);
				renderRectangle(new Rectangle(700, 420, 20, 20), g);
				renderRectangle(new Rectangle(450, 500, 250, 100), g);
				g.drawString("SUBMIT", 500, 575);
			}
		}
		
		//End Drawing!
		bs.show();
		g.dispose();
	}
	
	@Override
	public void run() {
		
		init();
		
		int fps = 60;
		double timePerTick = 1000000000 / fps;
		double delta = 0;
		long now;
		long lastTime = System.nanoTime();
		long timer = 0;
		int ticks = 0;
		
		while(running) {
			now = System.nanoTime();
			delta += (now - lastTime) / timePerTick;
			timer += now - lastTime;
			lastTime = now;
			
			if(delta >= 1){
				tick();
				render();
				ticks++;
				delta--;
			}
			
			if(timer >= 1000000000){
				System.out.println("Ticks and Frames: " + ticks);
				ticks = 0;
				timer = 0;
			}
		}
		
		stop();
	}
	
	public synchronized void start(){
		if(running)
			return;
		running = true;
		thread = new Thread(this);
		thread.start();
	}
	
	public synchronized void stop(){
		if(!running)
			return;
		running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}
